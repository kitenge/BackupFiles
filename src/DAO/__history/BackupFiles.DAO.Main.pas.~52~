unit BackupFiles.DAO.Main;

interface

uses
  System.SysUtils,
  System.Classes,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.FMXUI.Wait,
  Data.DB,
  FireDAC.Comp.Client,
  FireDAC.Phys.SQLite,
  FireDAC.Phys.SQLiteDef,
  FireDAC.Stan.ExprFuncs,
  FireDAC.Phys.SQLiteWrapper.Stat,
  System.IOUtils, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf,
  FireDAC.DApt, FireDAC.Comp.DataSet;

type
  TDM = class(TDataModule)
    database: TFDConnection;
    sqlAux: TFDQuery;
    procedure DataModuleCreate(Sender: TObject);
  private
    procedure ConectarBanco;
    { Private declarations }
  public
    { Public declarations }
    procedure VerificaTabela(aNomeTabela: string);
    procedure VerificaCampos(aNomeTabela: string;
      aNomeCampo, aTipoCampo: string);
  end;

var
  DM: TDM;

implementation

{%CLASSGROUP 'FMX.Controls.TControl'}
{$R *.dfm}

procedure TDM.DataModuleCreate(Sender: TObject);
begin
  ConectarBanco;
end;

procedure TDM.VerificaCampos(aNomeTabela, aNomeCampo, aTipoCampo: string);
begin
  sqlAux.Close;
  sqlAux.SQL.Text := 'SELECT * FROM ' + aNomeTabela + ' LIMIT 1';
  sqlAux.Open;

  if sqlAux.FindField(aNomeCampo) = nil then
  begin
    sqlAux.Close;
    sqlAux.SQL.Text := 'ALTER TABLE ' + aNomeTabela + ' ADD COLUMN ' +
      aNomeCampo + ' ' + aTipoCampo;
    sqlAux.ExecSQL;
  end;
end;

procedure TDM.VerificaTabela(aNomeTabela: string);
begin
  sqlAux.Close;
  sqlAux.SQL.Text := 'CREATE TABLE IF NOT EXISTS ' + aNomeTabela +
    '(Codigo TEXT(25) PRIMARY KEY) ';
  sqlAux.ExecSQL;
end;

procedure TDM.ConectarBanco;
begin
  if not database.Connected then
  begin
    if not DirectoryExists(ExtractFilePath(ParamStr(0)) + 'resources') then
      ForceDirectories(ExtractFilePath(ParamStr(0)) + 'resources');

    database.Params.Add('OpenMode=CreateUTF8');
    database.Params.database := ExtractFilePath(ParamStr(0)) + 'BackupFiles.db';
    database.Connected := True;
  end;
end;

end.
