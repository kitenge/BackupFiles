unit BackupFiles.View.Main;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes,
  System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.Controls.Presentation, FMX.StdCtrls, GDCornerButton, Winapi.Windows,
  FMX.TabControl, FMX.Edit, FMX.DateTimeCtrls, FMX.Effects, FMX.ListBox,
  FMX.Layouts, FMX.ListView.Types, FMX.ListView.Appearances,
  FMX.ListView.Adapters.Base, FMX.ListView, BackupFiles.Controller.BackupItem,
  BackupFiles.Controller.StorageSettings, BackupFiles.Model.Interfaces,
  BackupFiles.Controller.Settings;

type
  TFormMenuPrincipal = class(TForm)
    rectBase: TRectangle;
    rectTopo: TRectangle;
    rectLateral: TRectangle;
    rectLogo: TRectangle;
    rectConteudo: TRectangle;
    Image1: TImage;
    btnMinimizar: TGDCornerButton;
    btnExpandir: TGDCornerButton;
    btnFechar: TGDCornerButton;
    btnVisualizarRotina: TGDCornerButton;
    btnConfig: TGDCornerButton;
    btnSobre: TGDCornerButton;
    lblCaminho: TLabel;
    rectLateralProjeto: TRectangle;
    rectInfoProjeto: TRectangle;
    GDCornerButton1: TGDCornerButton;
    lblNomeProjeto: TLabel;
    lblDescricao: TLabel;
    btnConfiguracaoProjeto: TGDCornerButton;
    lblConfigProjeto: TLabel;
    btnListaDeArquivos: TGDCornerButton;
    lblAdicionarItem: TLabel;
    Line1: TLine;
    btnGravar: TGDCornerButton;
    Label1: TLabel;
    btnCancelar: TGDCornerButton;
    Label2: TLabel;
    tabControlGeral: TTabControl;
    tbVisualizaRotina: TTabItem;
    tabListaRotinas: TTabItem;
    TabControlRotinas: TTabControl;
    StyleBook1: TStyleBook;
    tbItemConfigRotina: TTabItem;
    tabItemListaArquivos: TTabItem;
    rectBaseConfigRotina: TRectangle;
    lblNomePagina: TLabel;
    lblDescricaoRotina: TLabel;
    rectDescricao: TRectangle;
    edtDescricaoRotina: TEdit;
    lblTotBackups: TLabel;
    rectLimiteBackups: TRectangle;
    edtLimiteBackups: TEdit;
    lblHorario: TLabel;
    rectHorario: TRectangle;
    tedtHorario: TTimeEdit;
    rectBaseStorage: TRectangle;
    lblArmazenamento: TLabel;
    Rectangle2: TRectangle;
    ShadowEffect1: TShadowEffect;
    ShadowEffect2: TShadowEffect;
    cbModeloArmazenamento: TComboBox;
    Rectangle1: TRectangle;
    Rectangle5: TRectangle;
    Rectangle3: TRectangle;
    edtDiretorio: TEdit;
    Label3: TLabel;
    btnBuscarDiretorio: TGDCornerButton;
    lblSenhaArquivo: TLabel;
    Rectangle4: TRectangle;
    edtSenhaArquivo: TEdit;
    Rectangle6: TRectangle;
    edtServidor: TEdit;
    lblServidor: TLabel;
    Rectangle7: TRectangle;
    edtUsuario: TEdit;
    lblUsuario: TLabel;
    Rectangle8: TRectangle;
    edtSenhaServidor: TEdit;
    lblSenhaServidor: TLabel;
    Rectangle9: TRectangle;
    edtPorta: TEdit;
    lblPorta: TLabel;
    Rectangle10: TRectangle;
    rectBaseItens: TRectangle;
    ShadowEffect4: TShadowEffect;
    btnAdicionarItem: TGDCornerButton;
    Label4: TLabel;
    btnRemoverItem: TGDCornerButton;
    Label5: TLabel;
    lblNomePaginaItens: TLabel;
    lbItens: TListBox;
    OpenDialogAdicionarItem: TOpenDialog;
    rectTopoGeral: TRectangle;
    btnMinimizarGeral: TGDCornerButton;
    btnExpandirGeral: TGDCornerButton;
    btnFecharGeral: TGDCornerButton;
    lblCaminhoGeral: TLabel;
    rectConteudoGeral: TRectangle;
    ShadowEffect3: TShadowEffect;
    lblListaRotinas: TLabel;
    rectPesquisa: TRectangle;
    edtPesquisa: TEdit;
    lblPesquisa: TLabel;
    btnCriarRotina: TGDCornerButton;
    Label6: TLabel;
    rectBotoes: TRectangle;
    rectGrid: TRectangle;
    rectCampos: TRectangle;
    lblCampoDescricao: TLabel;
    lblCampoDataCriacao: TLabel;
    lblCamposTotalBackup: TLabel;
    lblCamposAcoes: TLabel;
    ListView1: TListView;
    tabConfiguracao: TTabItem;
    rectTopoConfig: TRectangle;
    btnMinimizarConfig: TGDCornerButton;
    btnExpandirConfig: TGDCornerButton;
    btnFecharConfig: TGDCornerButton;
    lblCaminhoConfig: TLabel;
    TimerPesquisa: TTimer;
    rectGeralConfiguracao: TRectangle;
    ShadowEffect5: TShadowEffect;
    lblTituloConfig: TLabel;
    lblIniciarComWindows: TLabel;
    rectCheckBoxIniciarWindows: TRectangle;
    lblInfoIniciarComWindows: TLabel;
    lblIconCheck: TLabel;
    Label8: TLabel;
    procedure rectTopoMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure rectTopoResized(Sender: TObject);
    procedure btnConfiguracaoProjetoClick(Sender: TObject);
    procedure btnListaDeArquivosClick(Sender: TObject);
    procedure cbModeloArmazenamentoChange(Sender: TObject);
    procedure btnAdicionarItemClick(Sender: TObject);
    procedure btnRemoverItemClick(Sender: TObject);
    procedure btnVisualizarRotinaClick(Sender: TObject);
    procedure btnConfigClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure btnGravarClick(Sender: TObject);
    procedure lblPesquisaClick(Sender: TObject);
    procedure btnExcluirRotinaClick(Sender: TObject);
    procedure ListView1Paint(Sender: TObject; Canvas: TCanvas;
      const ARect: TRectF);
    procedure ListView1Exit(Sender: TObject);
    procedure btnCriarRotinaClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnBuscarDiretorioClick(Sender: TObject);
    procedure TimerPesquisaTimer(Sender: TObject);
    procedure edtPesquisaTyping(Sender: TObject);
    procedure edtDescricaoRotinaEnter(Sender: TObject);
    procedure edtDescricaoRotinaExit(Sender: TObject);
    procedure edtDescricaoRotinaKeyDown(Sender: TObject; var Key: Word;
      var KeyChar: Char; Shift: TShiftState);
    procedure edtLimiteBackupsKeyDown(Sender: TObject; var Key: Word;
      var KeyChar: Char; Shift: TShiftState);
    procedure tedtHorarioKeyDown(Sender: TObject; var Key: Word;
      var KeyChar: Char; Shift: TShiftState);
    procedure edtDiretorioKeyDown(Sender: TObject; var Key: Word;
      var KeyChar: Char; Shift: TShiftState);
    procedure edtSenhaArquivoKeyDown(Sender: TObject; var Key: Word;
      var KeyChar: Char; Shift: TShiftState);
    procedure edtServidorKeyDown(Sender: TObject; var Key: Word;
      var KeyChar: Char; Shift: TShiftState);
    procedure edtUsuarioKeyDown(Sender: TObject; var Key: Word;
      var KeyChar: Char; Shift: TShiftState);
    procedure edtSenhaServidorKeyDown(Sender: TObject; var Key: Word;
      var KeyChar: Char; Shift: TShiftState);
    procedure edtLimiteBackupsTyping(Sender: TObject);
    procedure ListView1ItemClickEx(const Sender: TObject; ItemIndex: Integer;
      const LocalClickPos: TPointF; const ItemObject: TListItemDrawable);
    procedure rectCheckBoxIniciarWindowsClick(Sender: TObject);
  private
    FCriando: Boolean;
    FCodigoRotina: string;
    procedure AplicaBordas(aValue: Integer);
    procedure FTPSelecionado(aValue: Boolean);
    procedure MudaPagina(var aTabItem: TTabItem);
    procedure LimparCampos;
    procedure GravarDados;
    procedure Pesquisar;
    procedure AlterarRotina;
    procedure HabilitarFoco(Sender: TObject; const aAtivar: Boolean = True);
    procedure Focar(aControle: TFMXObject);
    procedure ValidarNumero(Sender: TObject);
    procedure CarregaConfiguracao;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FormMenuPrincipal: TFormMenuPrincipal;

implementation

uses
  Winapi.Messages, BackupFiles.Controller.Routine;

{$R *.fmx}

procedure TFormMenuPrincipal.btnAdicionarItemClick(Sender: TObject);
var
  ItemIndex: Integer;
  FileName: string;
begin
  if OpenDialogAdicionarItem.Execute then
  begin
    FileName := OpenDialogAdicionarItem.FileName;
    ItemIndex := lbItens.Items.IndexOf(FileName);

    if ItemIndex = -1 then
    begin
      lbItens.Items.Add(FileName);
      lbItens.ListItems[lbItens.Count - 1].StyleLookup := 'ListBoxItem2Style1';
    end
    else
      ShowMessage('Este arquivo já foi adicionado.');
  end;
end;

procedure TFormMenuPrincipal.btnBuscarDiretorioClick(Sender: TObject);
var
  lDiretorio: string;
begin
  if SelectDirectory('Selecione o local para salvar', '', lDiretorio) then
    edtDiretorio.Text := lDiretorio;
end;

procedure TFormMenuPrincipal.btnCancelarClick(Sender: TObject);
begin
  MudaPagina(tabListaRotinas);
  FCriando := False;
  LimparCampos;
end;

procedure TFormMenuPrincipal.btnConfigClick(Sender: TObject);
begin
  if tabControlGeral.ActiveTab = tbVisualizaRotina then
  begin
    btnCancelarClick(btnCancelar);
    MudaPagina(tabConfiguracao);
  end
  else
    MudaPagina(tabConfiguracao);
end;

procedure TFormMenuPrincipal.btnConfiguracaoProjetoClick(Sender: TObject);
begin
  MudaPagina(tbItemConfigRotina);
end;

procedure TFormMenuPrincipal.btnCriarRotinaClick(Sender: TObject);
begin
  MudaPagina(tbVisualizaRotina);
  MudaPagina(tbItemConfigRotina);
  FCriando := True;
  LimparCampos;
  edtDescricaoRotina.SetFocus;
end;

procedure TFormMenuPrincipal.LimparCampos;
  procedure Limpar(aControle: TFMXObject);
  var
    Child: TFMXObject;
    I: Integer;
  begin
    // Verifica se o componente atual é um TEdit ou TTimeEdit e limpa conforme o caso
    if aControle is TEdit then
      TEdit(aControle).Text := ''
    else if aControle is TTimeEdit then
      TTimeEdit(aControle).Time := StrToTime('00:00')
    else if aControle is TComboBox then
    begin
      TComboBox(aControle).ItemIndex := 0;
      TComboBox(aControle).Enabled := True;
    end;

    // Itera por todos os filhos do componente atual
    for I := 0 to aControle.ChildrenCount - 1 do
    begin
      Child := aControle.Children[I];
      Limpar(Child); // Chamada recursiva para o filho
    end;
  end;

begin
  Limpar(rectBaseConfigRotina);
  Limpar(rectBaseStorage);
  Limpar(rectBaseItens);
  FCodigoRotina := '';
  lbItens.Clear;
  lblNomeProjeto.Text:= 'Nova Rotina'
end;

procedure TFormMenuPrincipal.btnExcluirRotinaClick(Sender: TObject);
begin
  TControllerRoutine.New.ListarRotinas(ListView1, 1, edtPesquisa.Text, True);
end;

procedure TFormMenuPrincipal.btnGravarClick(Sender: TObject);
begin
  MudaPagina(tabListaRotinas);
  GravarDados;
  LimparCampos;
end;

procedure TFormMenuPrincipal.GravarDados;
var
  lRotina: iRoutine;
  lConfig: iStorageSettings;
begin
  try
    if FCriando then
    begin
      lRotina := TControllerRoutine.New.Item;
      case cbModeloArmazenamento.ItemIndex of
        0:
          lConfig := TControllerStorageSettings.New.Item(Local);
        1:
          lConfig := TControllerStorageSettings.New.Item(FTP);
      end;
    end
    else
    begin
      lRotina := TControllerRoutine.New.Item.BuscarDados(FCodigoRotina);
      lConfig := lRotina.Configuracao;
    end;

    lConfig.Diretorio(edtDiretorio.Text).Servidor(edtServidor.Text)
      .Usuario(edtUsuario.Text).Senha(edtSenhaServidor.Text);
    if edtPorta.Text <> '' then
      lConfig.Porta(edtPorta.Text.ToInteger);

    case cbModeloArmazenamento.ItemIndex of
      0:
        lConfig.TipoConfiguracao(Local);
      1:
        lConfig.TipoConfiguracao(FTP);
    end;

    if edtSenhaArquivo.Text <> '' then
      lConfig.SenhaDeArquivo(edtSenhaArquivo.Text);

    lRotina.Descricao(edtDescricaoRotina.Text).Horario(tedtHorario.Time)
      .TotalBackupsSalvos(edtLimiteBackups.Text.ToInteger)
      .Configuracao(lConfig);

    lRotina.RemoverItens;
    for var Item in lbItens.Items do
    begin
      lRotina.AdicionarItem(TControllerBackupItem.New.Item(lRotina.Codigo)
        .Caminho(Item));
    end;

    lConfig.Salvar;
    lRotina.Salvar;
  finally
    TControllerRoutine.New.ListarRotinas(ListView1, ListView1.Tag,
      edtPesquisa.Text, True);
  end;
end;

procedure TFormMenuPrincipal.btnListaDeArquivosClick(Sender: TObject);
begin
  MudaPagina(tabItemListaArquivos);
end;

procedure TFormMenuPrincipal.btnRemoverItemClick(Sender: TObject);
begin
  lbItens.Items.Delete(lbItens.ItemIndex);
end;

procedure TFormMenuPrincipal.btnVisualizarRotinaClick(Sender: TObject);
begin
  if tabControlGeral.ActiveTab = tbVisualizaRotina then
    btnCancelarClick(btnCancelar)
  else
    MudaPagina(tabListaRotinas);
end;

procedure TFormMenuPrincipal.FormShow(Sender: TObject);
begin
  FCriando := False;
  MudaPagina(tabListaRotinas);
  TControllerRoutine.New.ListarRotinas(ListView1, ListView1.Tag,
    edtPesquisa.Text, True);

end;

procedure TFormMenuPrincipal.CarregaConfiguracao;
begin

end;


procedure TFormMenuPrincipal.FTPSelecionado(aValue: Boolean);
begin
  Rectangle6.Visible := aValue;
  lblServidor.Visible := aValue;
  Rectangle7.Visible := aValue;
  Rectangle8.Visible := aValue;
  Rectangle9.Visible := aValue;
  lblUsuario.Visible := aValue;
  lblSenhaServidor.Visible := aValue;
  lblPorta.Visible := aValue;
  btnBuscarDiretorio.Enabled := not aValue;
  edtDiretorio.Enabled := aValue;
end;

procedure TFormMenuPrincipal.lblPesquisaClick(Sender: TObject);
begin
  edtPesquisa.SetFocus;
end;

procedure TFormMenuPrincipal.Pesquisar;
begin
  TControllerRoutine.New.ListarRotinas(ListView1, ListView1.Tag,
    edtPesquisa.Text, True);
end;

procedure TFormMenuPrincipal.ListView1Exit(Sender: TObject);
begin
  ListView1.ItemIndex := -1;
end;

procedure TFormMenuPrincipal.ListView1ItemClickEx(const Sender: TObject;
  ItemIndex: Integer; const LocalClickPos: TPointF;
  const ItemObject: TListItemDrawable);
begin
  if ItemObject.Name = 'IconExcluir' then
  begin
    TControllerRoutine.New.Item.BuscarDados(ItemObject.TagString).Deletar;
    ListView1.Items.Delete(ItemIndex);
  end
  else if ItemObject.Name = 'IconPlay' then
  begin
    TControllerRoutine.New.Item.BuscarDados(ItemObject.TagString).IniciarBackup;
  end
  else
  begin
    FCodigoRotina := ItemObject.TagString;
    AlterarRotina;
    MudaPagina(tbVisualizaRotina);
    MudaPagina(tbItemConfigRotina);
  end;
end;

procedure TFormMenuPrincipal.AlterarRotina;
var
  lRotina: iRoutine;
  lConfig: iStorageSettings;
begin
  // Completa os Campos de Rotina

  lRotina := TControllerRoutine.New.Item.BuscarDados(FCodigoRotina);
  lblNomeProjeto.Text := lRotina.Descricao;
  edtDescricaoRotina.Text := lRotina.Descricao;
  edtLimiteBackups.Text := lRotina.TotalBackupsSalvos.ToString;
  tedtHorario.Time := lRotina.Horario;

  // Completa os Itens
  for var Item in lRotina.ListarItens do
  begin
    lbItens.Items.Add(Item.Caminho);
    lbItens.ListItems[lbItens.Count - 1].StyleLookup := 'ListBoxItem2Style1';
  end;

  // Completa as Configurações de Armazenamento
  edtDiretorio.Text := lRotina.Configuracao.Diretorio;
  edtSenhaArquivo.Text := lRotina.Configuracao.SenhaDeArquivo;
  edtServidor.Text := lRotina.Configuracao.Servidor;
  edtUsuario.Text := lRotina.Configuracao.Usuario;
  edtSenhaServidor.Text := lRotina.Configuracao.Senha;
  edtPorta.Text := lRotina.Configuracao.Porta.ToString;

  // Ajusta o ComboBox
  if lRotina.Configuracao.TipoConfiguracao = FTP then
    cbModeloArmazenamento.ItemIndex := 1
  else
    cbModeloArmazenamento.ItemIndex := 0;

  edtDescricaoRotina.SetFocus;
end;

procedure TFormMenuPrincipal.HabilitarFoco(Sender: TObject;
  const aAtivar: Boolean = True);
var
  lParentRectangle: TRectangle;
begin
  if Sender is TEdit then
    lParentRectangle := TEdit(Sender).Parent as TRectangle
  else if Sender is TTimeEdit then
    lParentRectangle := TTimeEdit(Sender).Parent as TRectangle
  else if Sender is TComboBox then
    lParentRectangle := TComboBox(Sender).Parent as TRectangle;

  if Assigned(lParentRectangle) then
  begin
    if aAtivar then
    begin
      lParentRectangle.Stroke.Color := $FF4F67AA;
      lParentRectangle.Stroke.Thickness := 2;
    end
    else
    begin
      lParentRectangle.Stroke.Color := $FFB6B6B6;
      lParentRectangle.Stroke.Thickness := 1;
    end;
  end;
end;

procedure TFormMenuPrincipal.ListView1Paint(Sender: TObject; Canvas: TCanvas;
  const ARect: TRectF);
begin
  if (ListView1.Items.Count >= 15) and (ListView1.Tag >= 0) then
    if ListView1.GetItemRect(ListView1.Items.Count - 5).Bottom <= ListView1.Height
    then
      TControllerRoutine.New.ListarRotinas(ListView1, ListView1.Tag + 1,
        edtPesquisa.Text, False);
end;

procedure TFormMenuPrincipal.MudaPagina(var aTabItem: TTabItem);
var
  lTabControl: TTabControl;
begin

  lTabControl := TTabControl(TTabControl(aTabItem.Parent).Parent);
  // rectTopo.Parent := aTabItem;

  if lTabControl = tabControlGeral then
  begin
    lblCaminhoGeral.Text := aTabItem.Text;
    lblCaminhoConfig.Text := aTabItem.Text;
  end
  else
    lblCaminho.Text := 'Lista de Rotinas  /  ' + lblNomeProjeto.Text + '  /  ' +
      aTabItem.Text;

  lTabControl.ActiveTab := aTabItem;
end;

procedure TFormMenuPrincipal.cbModeloArmazenamentoChange(Sender: TObject);
begin
  case cbModeloArmazenamento.ItemIndex of
    0:
      begin
        FTPSelecionado(False);
        Focar(edtSenhaArquivo)
      end;
    1:
      begin
        FTPSelecionado(True);
        Focar(edtDiretorio)
      end;
  end;
end;

procedure TFormMenuPrincipal.ValidarNumero(Sender: TObject);
var
  newText: string;
  I: Integer;
begin
  if Sender is TEdit then
  begin
    newText := '';
    for I := 1 to Length(TEdit(Sender).Text) do
    begin
      if CharInSet(TEdit(Sender).Text[I], ['0' .. '9']) then
      begin
        newText := newText + TEdit(Sender).Text[I];
      end;
    end;
    if TEdit(Sender).Text <> newText then
    begin
      TEdit(Sender).Text := newText;
      TEdit(Sender).SelStart := Length(newText);
    end;
  end;
end;

procedure TFormMenuPrincipal.edtDescricaoRotinaEnter(Sender: TObject);
begin
  HabilitarFoco(Sender);
end;

procedure TFormMenuPrincipal.edtDescricaoRotinaExit(Sender: TObject);
begin
  HabilitarFoco(Sender, False);
end;

procedure TFormMenuPrincipal.edtDescricaoRotinaKeyDown(Sender: TObject;
  var Key: Word; var KeyChar: Char; Shift: TShiftState);
begin
  if (Key in [vkReturn, vkTab]) then
  begin
    Focar(edtLimiteBackups);
  end;
end;

procedure TFormMenuPrincipal.edtDiretorioKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if (Key in [vkReturn, vkTab]) then
  begin
    Focar(edtSenhaArquivo)
  end;
end;

procedure TFormMenuPrincipal.edtLimiteBackupsKeyDown(Sender: TObject;
  var Key: Word; var KeyChar: Char; Shift: TShiftState);
begin
  if (Key in [vkReturn, vkTab]) then
  begin
    Focar(tedtHorario);
  end;
end;

procedure TFormMenuPrincipal.edtLimiteBackupsTyping(Sender: TObject);
begin
  ValidarNumero(Sender);
end;

procedure TFormMenuPrincipal.Focar(aControle: TFMXObject);
begin
  if aControle is TEdit then
  begin
    TEdit(aControle).SetFocus;
    TEdit(aControle).SelectAll;
  end
  else
    tcontrol(aControle).SetFocus;

end;

procedure TFormMenuPrincipal.edtPesquisaTyping(Sender: TObject);
begin
  TimerPesquisa.Enabled := False;
  TimerPesquisa.Enabled := True;
end;

procedure TFormMenuPrincipal.edtSenhaArquivoKeyDown(Sender: TObject;
  var Key: Word; var KeyChar: Char; Shift: TShiftState);
begin
  if (Key in [vkReturn, vkTab]) then
  begin
    if edtServidor.CanFocus then
      Focar(edtServidor)
  end;
end;

procedure TFormMenuPrincipal.edtSenhaServidorKeyDown(Sender: TObject;
  var Key: Word; var KeyChar: Char; Shift: TShiftState);
begin
  if (Key in [vkReturn, vkTab]) then
  begin
    Focar(edtPorta);
  end;
end;

procedure TFormMenuPrincipal.edtServidorKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if (Key in [vkReturn, vkTab]) then
  begin
    Focar(edtUsuario);
  end;
end;

procedure TFormMenuPrincipal.edtUsuarioKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if (Key in [vkReturn, vkTab]) then
  begin
    Focar(edtSenhaServidor);
  end;
end;

procedure TFormMenuPrincipal.rectCheckBoxIniciarWindowsClick(Sender: TObject);
begin
  if lblIconCheck.Text='' then // Marcado;
  begin
    lblIconCheck.Text:= '';
    lblIconCheck.Font.Family := 'Font Awesome 6 Free';
    TControllerSettings.New.Item.IniciarComWindows(False).Salvar;
  end
  else
  begin
    lblIconCheck.Text:='';
    lblIconCheck.Font.Family:= 'Font Awesome 6 Free Solid';
    TControllerSettings.New.Item.IniciarComWindows(True).Salvar;
  end;
end;

procedure TFormMenuPrincipal.rectTopoMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Single);
begin
  Self.StartWindowDrag;
end;

procedure TFormMenuPrincipal.rectTopoResized(Sender: TObject);
begin
  // Verificação para não bugar as bordas arredondas em tela maximizada
  if Self.WindowState = TWindowState.wsMaximized then
    AplicaBordas(0)
  else
    AplicaBordas(20)
end;

procedure TFormMenuPrincipal.tedtHorarioKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if (Key in [vkReturn, vkTab]) then
  begin
    Focar(cbModeloArmazenamento);
  end;
end;

procedure TFormMenuPrincipal.TimerPesquisaTimer(Sender: TObject);
begin
  TimerPesquisa.Enabled := False;
  Pesquisar;
end;

procedure TFormMenuPrincipal.AplicaBordas(aValue: Integer);
begin
  rectBase.XRadius := aValue;
  rectBase.YRadius := aValue;
  rectLogo.XRadius := aValue;
  rectLogo.YRadius := aValue;
  rectTopo.XRadius := aValue;
  rectTopo.YRadius := aValue;
  // rectTopoGeral.XRadius := aValue;
  // rectTopoGeral.YRadius := aValue;
end;

end.
