unit BackupFiles.Model.BackupItem;

interface

uses
  System.SysUtils,
  BackupFiles.Model.Interfaces,
  System.DateUtils, BackupFiles.DAO.BackupItem;

type
  TBackupItem = class(TInterfacedObject, iBackupItem)
  strict private
    function GenerateUniqueCode: string;
    function AtualizarNoBanco: string;
    function InserirNoBanco: string;
    procedure ObterInfoArquivo(Value: string);
  private
    FNome: string;
    FCodigoInterno: integer;
    FCaminho: string;
    FTamanho: Int64;
    FCodigoRotina: string;
    FCodigo: string;
    FUltimaModificacao: TDateTime;
    function Nome: string;
    function Caminho(Value: string): iBackupItem; overload;
    function Caminho: string; overload;
    function Tamanho: Int64;
    function UltimaModificacao: TDateTime;
    function CodigoRotina(Value: string): iBackupItem; overload;
    function CodigoRotina: string; overload;
    function Codigo: string;
    function CodigoInterno: integer;
    function BuscarDados(aCodigo: string): iBackupItem;
    function Salvar: iBackupItem;
  public
    constructor Create; overload;
    destructor Destroy; override;
    class function New: iBackupItem; overload;
  end;

implementation

uses
  System.IOUtils;

{ TBackupItem }

function TBackupItem.GenerateUniqueCode: string;
var
  GUID: TGUID;
  Timestamp: Int64;
  RandomPart: string;
begin
  // Gera um GUID
  CreateGUID(GUID);
  // Converte o GUID em string e remove os caracteres não numéricos
  Result := GUIDToString(GUID).Replace('{', '').Replace('}', '')
    .Replace('-', '');
  // Pega apenas os primeiros 18 caracteres para deixar espaço para o resto
  Result := Copy(Result, 1, 18);
  // Gera um timestamp
  Timestamp := DateTimeToUnix(Now, False);
  // Converte o timestamp para string e pega os últimos 7 dígitos
  RandomPart := IntToStr(Timestamp mod 10000000);
  // Assegura que a parte aleatória tenha 7 caracteres, preenchendo com '0' se necessário
  while Length(RandomPart) < 7 do
    RandomPart := '0' + RandomPart;
  // Combina as partes para formar um código único de 25 caracteres
  Result := Copy(Result + RandomPart, 1, 25);
end;

function TBackupItem.InserirNoBanco: string;
begin
  dmBackupItem.TabItemBackup.Insert;
  dmBackupItem.TabItemBackup.FieldByName('Nome').AsString := FNome;
  dmBackupItem.TabItemBackup.FieldByName('Caminho').AsString :=
    FCaminho;
  dmBackupItem.TabItemBackup.FieldByName('UltimaModificacao').AsDateTime
    := FUltimaModificacao;
  dmBackupItem.TabItemBackup.FieldByName('CodigoRotina').AsString :=
    FCodigo;
  dmBackupItem.TabItemBackup.FieldByName('Tamanho').AsInteger
    := FTamanho;
  dmBackupItem.TabItemBackup.FieldByName('Codigo').AsString := FCodigo;

  dmBackupItem.TabItemBackup.Post;
end;

function TBackupItem.Caminho(Value: string): iBackupItem;
begin
  if Value.IsEmpty then
    raise Exception.Create('Caminho de Arquivo Inválido');

  if not FileExists(Value) then
    raise Exception.Create('O Caminho selecionado não existe');

  FCaminho := Value;
  ObterInfoArquivo(Value);
  Result := Self;
end;

procedure TBackupItem.ObterInfoArquivo(Value: string);
begin
  FNome := ExtractFileName(Value);
  FTamanho := TFile.GetSize(Value);
  FUltimaModificacao := TFile.GetLastAccessTime(Value);
end;

function TBackupItem.AtualizarNoBanco: string;
begin
  dmBackupItem.TabItemBackupFiltrada.Close;
  dmBackupItem.TabItemBackupFiltrada.ParamByName('codigo').AsString := Self.FCodigo;
  dmBackupItem.TabItemBackupFiltrada.Open;

  dmBackupItem.TabItemBackupFiltrada.Edit;
  dmBackupItem.TabItemBackupFiltrada.FieldByName('Nome').AsString := FNome;
  dmBackupItem.TabItemBackupFiltrada.FieldByName('Caminho').AsString :=
    FCaminho;
  dmBackupItem.TabItemBackupFiltrada.FieldByName('UltimaModificacao').AsDateTime
    := FUltimaModificacao;
  dmBackupItem.TabItemBackupFiltrada.FieldByName('CodigoRotina').AsString :=
    FCodigoRotina;
  dmBackupItem.TabItemBackupFiltrada.FieldByName('Tamanho').AsInteger
    := FTamanho;
  dmBackupItem.TabItemBackupFiltrada.FieldByName('Codigo').AsString := FCodigo;
  dmBackupItem.TabItemBackupFiltrada.FieldByName('id').AsInteger :=
    FCodigoInterno;
  dmBackupItem.TabItemBackupFiltrada.Post;

end;

function TBackupItem.BuscarDados(aCodigo: string): iBackupItem;
begin
  if (aCodigo.IsEmpty) or (Length(aCodigo) <> 25) then
    raise Exception.Create('Código de item inválido para busca');

  dmBackupItem.TabItemBackupFiltrada.Close;
  dmBackupItem.TabItemBackupFiltrada.ParamByName('codigo').AsString := aCodigo;
  dmBackupItem.TabItemBackupFiltrada.Open;

  FNome := dmBackupItem.TabItemBackupFiltrada.FieldByName('Nome').AsString;
  FCaminho := dmBackupItem.TabItemBackupFiltrada.FieldByName('Caminho')
    .AsString;
  FUltimaModificacao := dmBackupItem.TabItemBackupFiltrada.FieldByName
    ('UltimaModificacao').AsDateTime;
  FCodigoRotina := dmBackupItem.TabItemBackupFiltrada.FieldByName
    ('CodigoRotina').AsString;
  FTamanho := dmBackupItem.TabItemBackupFiltrada.FieldByName('Tamanho')
    .AsInteger;
  FCodigo := dmBackupItem.TabItemBackupFiltrada.FieldByName('Codigo').AsString;
  FCodigoInterno := dmBackupItem.TabItemBackupFiltrada.FieldByName('rowid')
    .AsInteger;

  Result := Self;
end;

function TBackupItem.Caminho: string;
begin
  Result := Self.FCaminho;
end;

function TBackupItem.Codigo: string;
begin
  Result := FCodigo;
end;

function TBackupItem.CodigoInterno: integer;
begin
  Result := FCodigoInterno;
end;

function TBackupItem.CodigoRotina: string;
begin
  Result := FCodigoRotina;
end;

function TBackupItem.CodigoRotina(Value: string): iBackupItem;
begin
  if Length(Value) <> 25 then
    raise Exception.Create('O Código informado é inválido');
  if Value = '' then
    raise Exception.Create('O Código da Rotina não pode estar em branco');
  Result := Self;
  FCodigoRotina := Value
end;

constructor TBackupItem.Create;
begin
  inherited;
  FCodigo := GenerateUniqueCode;
end;

destructor TBackupItem.Destroy;
begin

  inherited;
end;

class function TBackupItem.New: iBackupItem;
begin
  Result := Self.Create;
end;

function TBackupItem.Nome: string;
begin
  Result := FNome;
end;

function TBackupItem.Salvar: iBackupItem;
begin
  if not dmBackupItem.TabItemBackup.Active then
    dmBackupItem.TabItemBackup.Open;
  if dmBackupItem.TabItemBackup.Locate('codigo', Self.FCodigo) then
  begin
    AtualizarNoBanco;
  end
  else
  begin
    InserirNoBanco;
  end;

end;

function TBackupItem.Tamanho: Int64;
begin
  Result := FTamanho;
end;

function TBackupItem.UltimaModificacao: TDateTime;
begin
  Result := FUltimaModificacao;
end;

end.
