unit BackupFiles.Model.StorageSettings;

interface

uses
  BackupFiles.Model.Interfaces,
  System.DateUtils, BackupFiles.DAO.StorageSettings;

type
  TStorageSettings = class(TInterfacedObject, iStorageSettings)
  strict private
    function GenerateUniqueCode: string;
    function AtualizarNoBanco: string;
    function InserirNoBanco: string;
  private
    FDiretorio: string;
    FServidor: string;
    FUsuario: string;
    FSenha: string;
    FSenhaDeArquivo: string;
    FPorta: integer;
    FCodigo: string;
    FTipoConfiguracao: TTipoConfigStorage;
    { Campos privados }
    function Diretorio(Value: string): iStorageSettings; overload;
    function Diretorio: string; overload;
    function Servidor(Value: string): iStorageSettings; overload;
    function Servidor: string; overload;
    function Usuario(Value: string): iStorageSettings; overload;
    function Usuario: string; overload;
    function Senha(Value: string): iStorageSettings; overload;
    function Senha: string; overload;
    function SenhaDeArquivo(Value: string): iStorageSettings; overload;
    function SenhaDeArquivo: string; overload;
    function Porta(Value: integer): iStorageSettings; overload;
    function Porta: integer; overload;
    function Codigo: string;
    function TipoConfiguracao(Value: TTipoConfigStorage)
      : iStorageSettings; overload;
    function TipoConfiguracao: TTipoConfigStorage; overload;
    function BuscarDados(aCodigo: string): iStorageSettings;
    function Salvar: iStorageSettings;
  public
    constructor Create(TipoConfiguracao: TTipoConfigStorage); overload;
    constructor Create; overload;
    destructor Destroy; override;
    class function New(TipoConfiguracao: TTipoConfigStorage)
      : iStorageSettings; overload;
    class function New: iStorageSettings; overload;
  end;

implementation

uses
  System.SysUtils;

{ TStorageSettings }

function TStorageSettings.GenerateUniqueCode: string;
var
  GUID: TGUID;
  Timestamp: Int64;
  RandomPart: string;
begin
  // Gera um GUID
  CreateGUID(GUID);
  // Converte o GUID em string e remove os caracteres não numéricos
  Result := GUIDToString(GUID).Replace('{', '').Replace('}', '')
    .Replace('-', '');
  // Pega apenas os primeiros 18 caracteres para deixar espaço para o resto
  Result := Copy(Result, 1, 18);
  // Gera um timestamp
  Timestamp := DateTimeToUnix(Now, False);
  // Converte o timestamp para string e pega os últimos 7 dígitos
  RandomPart := IntToStr(Timestamp mod 10000000);
  // Assegura que a parte aleatória tenha 7 caracteres, preenchendo com '0' se necessário
  while Length(RandomPart) < 7 do
    RandomPart := '0' + RandomPart;
  // Combina as partes para formar um código único de 25 caracteres
  Result := Copy(Result + RandomPart, 1, 25);
end;

function TStorageSettings.AtualizarNoBanco: string;
begin

  dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.Close;
  dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.ParamByName('codigo')
    .AsString := Self.FCodigo;
  dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.Open;

  dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.Edit;
  dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.FieldByName
    ('Diretorio').AsString := FDiretorio;
  dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.FieldByName('Servidor')
    .AsString := FServidor;
  dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.FieldByName('Usuario')
    .AsString := FUsuario;
  dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.FieldByName('Senha')
    .AsString := FSenha;
  dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.FieldByName('Porta')
    .AsInteger := FPorta;
  dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.FieldByName('Codigo')
    .AsString := FCodigo;
  if FTipoConfiguracao = FTP then
    dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.FieldByName
      ('TipoConfiguracao').AsString := 'FTP'
  else
    dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.FieldByName
      ('TipoConfiguracao').AsString := 'Local';

  dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.Post;

end;

function TStorageSettings.InserirNoBanco: string;
begin
  dmStorageSettings.TabConfiguracaoArmazenamento.Insert;

  dmStorageSettings.TabConfiguracaoArmazenamento.FieldByName('Diretorio')
    .AsString := FDiretorio;
  dmStorageSettings.TabConfiguracaoArmazenamento.FieldByName('Servidor')
    .AsString := FServidor;
  dmStorageSettings.TabConfiguracaoArmazenamento.FieldByName('Usuario').AsString
    := FUsuario;
  dmStorageSettings.TabConfiguracaoArmazenamento.FieldByName('Senha').AsString
    := FSenha;
  dmStorageSettings.TabConfiguracaoArmazenamento.FieldByName('Porta').AsInteger
    := FPorta;
  dmStorageSettings.TabConfiguracaoArmazenamento.FieldByName('Codigo').AsString
    := FCodigo;
  if FTipoConfiguracao = FTP then
    dmStorageSettings.TabConfiguracaoArmazenamento.FieldByName
      ('TipoConfiguracao').AsString := 'FTP'
  else
    dmStorageSettings.TabConfiguracaoArmazenamento.FieldByName
      ('TipoConfiguracao').AsString := 'Local';

  dmStorageSettings.TabConfiguracaoArmazenamento.Post;
end;

class function TStorageSettings.New: iStorageSettings;
begin
  Result := Self.Create;
end;

function TStorageSettings.BuscarDados(aCodigo: string): iStorageSettings;
begin
  if (aCodigo.IsEmpty) or (Length(aCodigo) <> 25) then
    raise Exception.Create('Código de configuração inválido para busca');

  dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.Close;
  dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.ParamByName('codigo')
    .AsString := aCodigo;
  dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.Open;

  FDiretorio := dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.
    FieldByName('Diretorio').AsString;
  FServidor := dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.
    FieldByName('Servidor').AsString;
  FUsuario := dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.FieldByName
    ('Usuario').AsString;
  FSenha := dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.FieldByName
    ('Senha').AsString;
  FPorta := dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.FieldByName
    ('Porta').AsInteger;
  FCodigo := dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.FieldByName
    ('Codigo').AsString;

  if dmStorageSettings.TabConfiguracaoArmazenamentoFiltrada.FieldByName
    ('TipoConfiguracao').AsString = 'FTP' then
    FTipoConfiguracao := FTP
  else
    FTipoConfiguracao := Local;

  Result := Self;
end;

function TStorageSettings.Codigo: string;
begin
  Result := FCodigo;
end;

constructor TStorageSettings.Create;
begin
  FCodigo := GenerateUniqueCode;
  FSenhaDeArquivo := '';
end;

constructor TStorageSettings.Create(TipoConfiguracao: TTipoConfigStorage);
begin
  FCodigo := GenerateUniqueCode;
  FSenhaDeArquivo := '';
end;

destructor TStorageSettings.Destroy;
begin

  inherited;
end;

function TStorageSettings.Diretorio(Value: string): iStorageSettings;
begin
  if Value = '' then
    raise Exception.Create('O Caminho do diretório não pode estar em branco');
  if not DirectoryExists(Value) then
    raise Exception.Create('O diretório informado não existe');
  FDiretorio := Value;
  Result := Self;
end;

function TStorageSettings.Diretorio: string;
begin
  Result := FDiretorio;
end;

class function TStorageSettings.New(TipoConfiguracao: TTipoConfigStorage)
  : iStorageSettings;
begin
  Result := Self.Create(TipoConfiguracao);
end;

function TStorageSettings.Porta(Value: integer): iStorageSettings;
begin
  if FTipoConfiguracao = Local then
    raise Exception.Create
      ('A Porta só é inserida caso a configuração seja FTP');
  FPorta := Value;
  Result := Self;
end;

function TStorageSettings.Porta: integer;
begin
  Result := FPorta;
end;

function TStorageSettings.Senha(Value: string): iStorageSettings;
begin
  if FTipoConfiguracao = Local then
    raise Exception.Create
      ('A Senha só é inserida caso a configuração seja FTP');
  FSenha := Value;
  Result := Self;
end;

function TStorageSettings.Salvar: iStorageSettings;
begin
  if not dmStorageSettings.TabConfiguracaoArmazenamento.Active then
    dmStorageSettings.TabConfiguracaoArmazenamento.Open;
  if dmStorageSettings.TabConfiguracaoArmazenamento.Locate('codigo',
    Self.FCodigo) then
  begin
    AtualizarNoBanco;
  end
  else
  begin
    InserirNoBanco;
  end;
end;

function TStorageSettings.Senha: string;
begin
  Result := FSenha;
end;

function TStorageSettings.SenhaDeArquivo: string;
begin
  Result := FSenhaDeArquivo;
end;

function TStorageSettings.SenhaDeArquivo(Value: string): iStorageSettings;
begin
  if Value = '' then
    raise Exception.Create
      ('A senha para o arquivo compactado não pode ser vazia');
  Result := Self;
end;

function TStorageSettings.Servidor: string;
begin
  Result := FServidor;
end;

function TStorageSettings.TipoConfiguracao: TTipoConfigStorage;
begin
  Result := FTipoConfiguracao;
end;

function TStorageSettings.TipoConfiguracao(Value: TTipoConfigStorage)
  : iStorageSettings;
begin
  FTipoConfiguracao := Value;
  Result := Self;
end;

function TStorageSettings.Servidor(Value: string): iStorageSettings;
begin
  if Value = '' then
    raise Exception.Create('Hostname/IP do servidor não poder ficar em branco');
  if FTipoConfiguracao = Local then
    raise Exception.Create
      ('O Servidor só é inserido caso a configuração seja FTP');
  FServidor := Value;
  Result := Self;
end;

function TStorageSettings.Usuario(Value: string): iStorageSettings;
begin
  if Value = '' then
    raise Exception.Create('Usuario do servidor não poder ficar em branco');
  if FTipoConfiguracao = Local then
    raise Exception.Create
      ('O Usuario só é inserido caso a configuração seja FTP');
  FUsuario := Value;
  Result := Self;
end;

function TStorageSettings.Usuario: string;
begin
  Result := FUsuario;
end;

end.
